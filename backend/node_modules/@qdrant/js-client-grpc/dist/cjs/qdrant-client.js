"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QdrantClient = void 0;
const api_client_js_1 = require("./api-client.js");
const errors_js_1 = require("./errors.js");
class QdrantClient {
    constructor({ url, host, apiKey, https, prefix, port = 6334, timeout = 300000 } = {}) {
        this._https = https ?? typeof apiKey === 'string';
        this._scheme = this._https ? 'https' : 'http';
        this._prefix = prefix ?? '';
        if (this._prefix.length > 0 && !this._prefix.startsWith('/')) {
            this._prefix = `/${this._prefix}`;
        }
        if (url && host) {
            throw new errors_js_1.QdrantClientConfigError(`Only one of \`url\`, \`host\` params can be set. Url is ${url}, host is ${host}`);
        }
        if (host && (host.startsWith('http://') || host.startsWith('https://') || /:\d+$/.test(host))) {
            throw new errors_js_1.QdrantClientConfigError('The `host` param is not expected to contain neither protocol (http:// or https://) nor port (:6333).\n' +
                'Try to use the `url` parameter instead.');
        }
        else if (url) {
            if (!(url.startsWith('http://') || url.startsWith('https://'))) {
                throw new errors_js_1.QdrantClientConfigError('The `url` param expected to contain a valid URL starting with a protocol (http:// or https://).');
            }
            const parsedUrl = new URL(url);
            this._host = parsedUrl.hostname;
            this._port = parsedUrl.port ? Number(parsedUrl.port) : port;
            this._scheme = parsedUrl.protocol.replace(':', '');
            if (this._prefix.length > 0 && parsedUrl.pathname !== '/') {
                throw new errors_js_1.QdrantClientConfigError('Prefix can be set either in `url` or in `prefix`.\n' +
                    `url is ${url}, prefix is ${parsedUrl.pathname}`);
            }
        }
        else {
            this._port = port;
            this._host = host ?? '127.0.0.1';
        }
        if (typeof apiKey === 'string') {
            if (this._scheme === 'http') {
                console.warn('Api key is used with unsecure connection.');
            }
        }
        const address = this._port ? `${this._host}:${this._port}` : this._host;
        this._restUri = `${this._scheme}://${address}${this._prefix}`;
        this._grcpClients = (0, api_client_js_1.createApis)(this._restUri, { apiKey, timeout });
    }
    /**
     * API getter
     *
     * @param string Name of api
     * @returns An instance of a namespaced API, generated from grpc services.
     */
    api(name) {
        return this._grcpClients[name];
    }
}
exports.QdrantClient = QdrantClient;
